xv <- GDP$Date
yv <- GDP$Aruba
mdf <- melt(df,id=xv,measure=yv)
mdf <- melt(df,id.vars=xv,measure.vars=yv)
xv
yv
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
DT
melt(df,id.vars=xv,measure.vars=yv)
yv <- DT$d_1
xv <- DT$d_2
melt(DT,id.vars=xv,measure.vars=yv)
melt(DT,id=xv,measure=yv)
melt(df,id.vars=xv,measure.vars=yv)
melt(DT, id=c("i_1", "i_2"), measure=3)
melt(DT, id=1:2, measure=patterns("l_", "c_"), na.rm=TRUE)
melt(DT, id=1:2, measure=patterns("l_", "c_"), na.rm=TRUE)
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
xv <- GDP$Date
yv <- GDP$Aruba
xv
yv
plt(xv,yv)
plot(xv,yv)
melt(GDP, id.vars="a")
melt(GDP, id.vars="Date")
ds = melt(GDP, id.vars="Date")
head(ds)
ds$value
ds = melt(GDP, id.vars=xv)
xv
names(xv)
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
ds = melt(GDP, id.vars=xv)
ds = melt(GDP, id.vars="Date")
ds
head(ds)
ds = melt(GDP, id.vars="Date",measure.vars=yv)
ds
melt(GDP, id.vars="Date",measure.vars=yv)
melt(GDP, id.vars="Date",measure.vars=abs(yv))
melt(GDP, id.vars="Date",measure.vars=abs(yv),na.rm=TRUE)
melt(GDP, id.vars="Date",measure.vars=abs(yv),na.rm=TRUE)
yv
xv
year(xv)
ds = melt(GDP, id.vars=xv)
ds = melt(GDP, id.vars=years(xv))
ds
ds = melt(GDP, id.vars=years(xv),measure.vars = yv)
ds
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
library(shiny)
library(shinydashboard)
library(leaflet)
library(data.table)
library(ggplot2)
ui <- pageWithSidebar(
headerPanel("CSV Viewer"),
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv','text/comma-separated-values,text/plain','.csv')),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
fluidRow(
column(6,radioButtons("xaxisGrp","X-Axis:", c("1"="1","2"="2"))),
column(6,checkboxGroupInput("yaxisGrp","Y-axis:", c("1"="1","2"="2")))
),
radioButtons('sep', 'Separator',
c(Comma=',', Semicolon=';',Tab='\t'), ','),
radioButtons('quote', 'Quote',
c(None='','Double Quote'='"','Single Quote'="'"),'"'),
uiOutput("choose_columns")
),
mainPanel(
tabsetPanel(
tabPanel("Plot",plotOutput("plot")),
tabPanel("Data", tableOutput('contents'))
)
)
)
server <- function(input, output,session) {
dsnames <- c()
data_set <- reactive({
inFile <- input$file1
if (is.null(inFile))
return(mtcars)
data_set<-read.csv(inFile$datapath, header=input$header,
sep=input$sep, quote=input$quote)
})
output$contents <- renderTable({data_set()})
observe({
dsnames <- names(data_set())
cb_options <- list()
cb_options[ dsnames] <- dsnames
updateRadioButtons(session, "xaxisGrp",
label = "X-Axis",
choices = cb_options,
selected = "")
updateCheckboxGroupInput(session, "yaxisGrp",
label = "Y-Axis",
choices = cb_options,
selected = "")
})
output$choose_dataset <- renderUI({
selectInput("dataset", "Data set", as.list(data_sets))
})
output$plot = renderPlot(
{
df <- data_set()
gp <- NULL
if (!is.null(df)){
xv <- input$xaxisGrp
yv <- input$yaxisGrp
if (!is.null(xv) & !is.null(yv)){
if (sum(xv %in% names(df))>0){ # supress error when changing files
mdf <- melt(df,id.vars=xv,measure.vars=yv)
gp <- ggplot(data=mdf) +
geom_point(aes_string(x=xv,y="value",color="variable"))
}
}
}
return(gp)
}
)
output$choose_columns <- renderUI({
if(is.null(input$dataset))
return()
colnames <- names(contents)
checkboxGroupInput("columns", "Choose columns",
choices  = colnames,
selected = colnames)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- pageWithSidebar(
headerPanel("CSV Viewer"),
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv','text/comma-separated-values,text/plain','.csv')),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
fluidRow(
column(6,radioButtons("xaxisGrp","X-Axis:", c("1"="1","2"="2"))),
column(6,checkboxGroupInput("yaxisGrp","Y-axis:", c("1"="1","2"="2")))
),
radioButtons("Descrip Stat", "Stat Type:",
c("Maximum" = "max","Minimum" = "min","Median" = "median",
"STD" = "std")),
uiOutput("choose_columns")
),
mainPanel(
tabsetPanel(
tabPanel("Plot",plotOutput("plot")),
tabPanel("Data", tableOutput('contents'))
)
)
)
server <- function(input, output,session) {
dsnames <- c()
data_set <- reactive({
inFile <- input$file1
if (is.null(inFile))
return(mtcars)
data_set<-read.csv(inFile$datapath, header=input$header,
sep=input$sep, quote=input$quote)
})
output$contents <- renderTable({data_set()})
observe({
dsnames <- names(data_set())
cb_options <- list()
cb_options[ dsnames] <- dsnames
updateRadioButtons(session, "xaxisGrp",
label = "X-Axis",
choices = cb_options,
selected = "")
updateCheckboxGroupInput(session, "yaxisGrp",
label = "Y-Axis",
choices = cb_options,
selected = "")
})
output$choose_dataset <- renderUI({
selectInput("dataset", "Data set", as.list(data_sets))
})
output$plot = renderPlot(
{
df <- data_set()
gp <- NULL
if (!is.null(df)){
xv <- input$xaxisGrp
yv <- input$yaxisGrp
if (!is.null(xv) & !is.null(yv)){
if (sum(xv %in% names(df))>0){ # supress error when changing files
mdf <- melt(df,id.vars=xv,measure.vars=yv)
gp <- ggplot(data=mdf) +
geom_point(aes_string(x=xv,y="value",color="variable"))
}
}
}
return(gp)
}
)
output$choose_columns <- renderUI({
if(is.null(input$dataset))
return()
colnames <- names(contents)
checkboxGroupInput("columns", "Choose columns",
choices  = colnames,
selected = colnames)
})
}
shinyApp(ui, server)
c("1"="1","2"="2")
c("1"="1","2"="2")
seq(1,264)
shinyApp(ui, server)
runApp('Project_As3.R')
xx = names(GDP)
cd = list()
cd[xx] = xx
cd
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
c("1"="1")
runApp('Project_As3.R')
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('C:/Users/chimchol/Desktop/Perso/R/Cours9/Project/AssignmentWeek3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
cv = c("dt",)
df = GDP
C("Date",unique(colnames(df))[1:5])
unique(colnames(df))[1:5]
unique(colnames(df))[1:5]
C("Date",unique(colnames(df))[1:5])
["Date",unique(colnames(df))[1:5]]
("Date",unique(colnames(df))[1:5])
c("Date",unique(colnames(df))[1:5])
c("Date",unique(colnames(df))[2:6])
runApp('Project_As3.R')
length(unique(colnames(df))[2:7])
runApp('Project_As3.R')
df[1]
length(df[1])
length(df)
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
library(data.table)
library(ggplot2)
ui <- pageWithSidebar(
headerPanel("CSV Viewer"),
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv','text/comma-separated-values,text/plain','.csv')),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
fluidRow(
column(6,radioButtons("xaxisGrp","X-Axis:", c("1"="1","2"="2"))),
column(6,checkboxGroupInput("yaxisGrp","Y-axis:", c("1"="1","2"="2")))
),
radioButtons('sep', 'Separator',
c(Comma=',', Semicolon=';',Tab='\t'), ','),
radioButtons('quote', 'Quote',
c(None='','Double Quote'='"','Single Quote'="'"),'"'),
uiOutput("choose_columns")
),
mainPanel(
tabsetPanel(
tabPanel("Plot",plotOutput("plot")),
tabPanel("Data", tableOutput('contents'))
)
)
)
server <- function(input, output,session) {
dsnames <- c()
data_set <- reactive({
inFile <- input$file1
if (is.null(inFile))
return(mtcars)
data_set<-read.csv(inFile$datapath, header=input$header,
sep=input$sep, quote=input$quote)
})
output$contents <- renderTable({data_set()})
observe({
dsnames <- names(data_set())
cb_options <- list()
cb_options[ dsnames] <- dsnames
updateRadioButtons(session, "xaxisGrp",
label = "X-Axis",
choices = cb_options,
selected = "")
updateCheckboxGroupInput(session, "yaxisGrp",
label = "Y-Axis",
choices = cb_options,
selected = "")
})
output$choose_dataset <- renderUI({
selectInput("dataset", "Data set", as.list(data_sets))
})
output$plot = renderPlot(
{
df <- data_set()
gp <- NULL
if (!is.null(df)){
xv <- input$xaxisGrp
yv <- input$yaxisGrp
if (!is.null(xv) & !is.null(yv)){
if (sum(xv %in% names(df))>0){ # supress error when changing files
mdf <- melt(df,id.vars=xv,measure.vars=yv)
gp <- ggplot(data=mdf) +
geom_point(aes_string(x=xv,y="value",color="variable"))
}
}
}
return(gp)
}
)
output$choose_columns <- renderUI({
if(is.null(input$dataset))
return()
colnames <- names(contents)
checkboxGroupInput("columns", "Choose columns",
choices  = colnames,
selected = colnames)
})
}
shinyApp(ui, server)
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
library(shiny)
library(shinydashboard)
library(leaflet)
library(data.table)
library(ggplot2)
ui <- pageWithSidebar(
headerPanel("CSV Viewer"),
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv','text/comma-separated-values,text/plain','.csv')),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
fluidRow(
column(6,radioButtons("xaxisGrp","X-Axis:", c("1"="1","2"="2"))),
column(6,checkboxGroupInput("yaxisGrp","Y-axis:", c("1"="1","2"="2")))
),
radioButtons('sep', 'Separator',
c(Comma=',', Semicolon=';',Tab='\t'), ','),
radioButtons('quote', 'Quote',
c(None='','Double Quote'='"','Single Quote'="'"),'"'),
uiOutput("choose_columns")
),
mainPanel(
tabsetPanel(
tabPanel("Plot",plotOutput("plot")),
tabPanel("Data", tableOutput('contents'))
)
)
)
server <- function(input, output,session) {
dsnames <- c()
data_set <- reactive({
inFile <- input$file1
if (is.null(inFile))
return(mtcars)
data_set<-read.csv(inFile$datapath, header=input$header,
sep=input$sep, quote=input$quote)
})
output$contents <- renderTable({data_set()})
observe({
dsnames <- names(data_set())
cb_options <- list()
cb_options[ dsnames] <- dsnames
updateRadioButtons(session, "xaxisGrp",
label = "X-Axis",
choices = cb_options,
selected = "")
updateCheckboxGroupInput(session, "yaxisGrp",
label = "Y-Axis",
choices = cb_options,
selected = "")
})
output$choose_dataset <- renderUI({
selectInput("dataset", "Data set", as.list(data_sets))
})
output$plot = renderPlot(
{
df <- data_set()
gp <- NULL
if (!is.null(df)){
xv <- input$xaxisGrp
yv <- input$yaxisGrp
if (!is.null(xv) & !is.null(yv)){
if (sum(xv %in% names(df))>0){ # supress error when changing files
mdf <- melt(df,id.vars=xv,measure.vars=yv)
gp <- ggplot(data=mdf) +
geom_point(aes_string(x=xv,y="value",color="variable"))
}
}
}
return(gp)
}
)
output$choose_columns <- renderUI({
if(is.null(input$dataset))
return()
colnames <- names(contents)
checkboxGroupInput("columns", "Choose columns",
choices  = colnames,
selected = colnames)
})
}
shinyApp(ui, server)
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
date <- data.frame(date = seq(as.Date("1960/1/1"), as.Date("2016/1/1"), "years"))
GDP <- read.csv(file="API_NY.GDP.MKTP.KD.ZG_DS2_fr_csv_v2.csv",
header=TRUE,skip = 4, sep=",")
GDP <- subset(GDP, select = c(Country.Name,5:61))
namecol <- GDP$Country.Name
colnames(GDP) <- " "
mat_df <- t(GDP[2:58])
df <- as.data.frame(mat_df)
colnames(df) <- namecol
GDP <- df
GDP$Date <- date$date
GDP$key <- seq(1,nrow(GDP))
View(GDP)
View(GDP)
GDP <- df[2:10]
GDP$Date <- date$date
View(GDP)
getwd()
write.csv(GDP,file = "GDP.csv")
IndDep <- read.csv(file="API_SP.POP.TOTL_DS2_fr_csv_v2.csv",
header=TRUE,skip = 4, sep=",")
PopPays <- subset(IndDep, select = c(Country.Name,5:61))
namecol <- PopPays$Country.Name
colnames(PopPays) <- " "
mat_df <- t(PopPays[2:58])
df <- as.data.frame(mat_df)
colnames(df) <- namecol
PopPays <- df[2:10]
PopPays$Date <- date$date
write.csv(PopPays,file = "PopPays.csv")
View(PopPays)
runApp('Project_As3.R')
View(GDP)
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
runApp('Project_As3.R')
getwd()
setwd("C:/Users/chimchol/Desktop/Perso/R/Cours9/ProjetAssignment4")
getwd()
setwd("C:/Users/chimchol/Desktop/Perso/R/Cours9/shiny/inputApp")
setwd("C:/Users/chimchol/Desktop/Perso/R/Cours9/ProjetAssignment4")
runApp()
runApp()
runApp()
runApp()
runApp()
year(GDP$Date)
runApp()
runApp()
Years(df$Date)
years(df$Date)
years(GDP$Date)
Years(GDP$Date)
year(GDP$Date)
runApp()
runApp()
runApp()
runApp()
